require 'rack/oauth2'

class FacebooksController < ApplicationController
  
  # authentication only required for the destroy function 
  # because otherwise we're not logged in (i.e. nothing to destroy!)
  
  before_filter :require_authentication, :only => :destroy

  # should handle errors from OAuth2 (access token retrieval) errors
  
  rescue_from Rack::OAuth2::Client::Error, :with => :oauth2_error

  # [NOT SURE THIS IS USED AT ALL NOW...]
  # handle Facebook Auth Cookie generated by JavaScript SDK
  def show
  auth = Facebook.auth.from_cookie(cookies)
  authenticate Facebook.identify(auth.user)
   redirect_to dashboard_url
  end

  # handle Normal OAuth flow: start - NB - making calls on the model facebook.rb, to set up FBGraph::Auth object
  def new
    client = Facebook.auth(callback_facebook_url).client
    redirect_to client.authorization_uri(
      :scope => Facebook.config[:scope]
    )
  end

  # handle Normal OAuth flow: callback - now verifies access token to give user access
  def create
    client = Facebook.auth(callback_facebook_url).client
    client.authorization_code = params[:code]
    access_token = client.access_token! :client_auth_body
    user = FbGraph::User.me(access_token).fetch
    authenticate Facebook.identify(user)
    redirect_to dashboard_url
  end
  
  
  def destroy
    unauthenticate
    redirect_to root_url
  end

  private

  def oauth2_error(e)
    flash[:error] = {
      :title => e.response[:error][:type],
      :message => e.response[:error][:message]
    }
    redirect_to root_url
  end
end
